{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OAEQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMd,SACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEqCC,UAAUH,GAF/C,+DAGCI,MAAOF,GAHR,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAcXM,GAdW,4CAAH,sDCAVO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,+DAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCJJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEVd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJuB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAuBpC,OAdAC,qBAAU,WACN1B,EAASC,GACJ0B,MAAK,SAAAC,GAEEH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAK1B,CAACtB,IAGGuB,EDpBqBK,CAAc5B,GAAjCa,EAHwB,EAG7BN,KAAae,EAHgB,EAGhBA,QAIrB,OACI,qCACA,oBAAIJ,UAAU,wCAAd,SAAyDlB,IAEvDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGGL,EAAOJ,KAAK,SAACC,GAAD,OACT,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEhBZkB,EAAe,WAAO,IAAD,EAGM3C,mBAAS,CAAC,cAHhB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAS9B,OACI,qCACI,8CACA,cAAC,EAAD,CACIA,cAAgBA,IAEpB,uBAIA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,YCjBf+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.cd24a0d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n            <form onSubmit={handleSubmit} >\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}    \r\n            />\r\n            </form>\r\n       \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n   export const getGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=0OcHVRFy7RMd3PKqdHUPXwLgenmsLm2e`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown animate__delay-2s'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   \r\n    const { data:images, loading} = useFetchGifs( category );\r\n\r\n  \r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeInDown\" >{ category }</h3>\r\n\r\n        { loading && <p className='animate__animated animate__flash' >Loading...</p> }\r\n\r\n         <div className='card-grid' >\r\n            \r\n            {\r\n            images.map( (img) => \r\n               <GifGridItem \r\n               key= {img.id}\r\n               {...img}\r\n               />\r\n            )}\r\n            \r\n        </div> \r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n        const [state, setState] = useState({\r\n            data: [],\r\n            loading: true\r\n        });\r\n\r\n        \r\n\r\n        useEffect(() => {\r\n            getGifs( category )\r\n                .then(imgs => {\r\n                    \r\n                        setState({\r\n                            data: imgs,\r\n                            loading: false\r\n                        }); \r\n                    \r\n                    \r\n                })\r\n        }, [category])\r\n    \r\n        \r\n        return state;  //{ data: [], loading: true}\r\n    \r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     // setCategories([...categories, 'HunterXHunter']);\r\n    //     // setCategories( cats => [...cats, 'HunterXHunter']);\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory  \r\n                setCategories={ setCategories }\r\n            />\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid  \r\n                        key={ category }\r\n                        category={ category } \r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}